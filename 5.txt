import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

def generate_data():
    np.random.seed(42)
    x = np.random.rand(100, 1)
    y = np.array([1 if xi <= 0.5 else 2 for xi in x])
    return x, y

def main():
    x, y = generate_data()
    x_train, y_train = x[:50], y[:50]
    x_test, y_test = x[50:], y[50:]

    k_values = [1, 2, 3, 4, 5, 20, 30]

    print("\n--- k-NN Classification Results ---\n")

    for k in k_values:
        knn = KNeighborsClassifier(n_neighbors=k)
        knn.fit(x_train, y_train)
        y_pred = knn.predict(x_test)

        accuracy = np.mean(y_pred == y_test)

        print(f"Results for k={k}: (Accuracy: {accuracy:.2f})")
        for i, label in enumerate(y_pred, start=51):
            print(f"Test Point x{i} (value: {x_test[i-51][0]:.4f}) -> Classified as Class {label}")
        print("\n")

        plt.figure(figsize=(8, 5))
        plt.scatter(x_train, y_train, c='blue', edgecolors='black', label='Training Data', marker='o')
        plt.scatter(x_test, y_pred, c='red', marker='x', label=f'Predictions (k={k})')
        plt.xlabel('x values')
        plt.ylabel('Class Label')
        plt.yticks([1, 2], ["Class 1", "Class 2"])
        plt.title(f'k-NN Classification for k={k} (Accuracy: {accuracy:.2f})')
        plt.legend()
        plt.grid(True)
        plt.show()

if __name__ == "__main__":
    main()