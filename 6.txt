import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.preprocessing import StandardScaler

data = fetch_california_housing()
X = data.data[:, 0] 
Y = data.target 

scaler = StandardScaler()
X = scaler.fit_transform(X.reshape(-1,1)).flatten()

def locally_weighted_regression(x0, X, Y, tau):
    m = X.shape[0]
    W = np.eye(m)

    for i in range(m):
        W[i,i] = np.exp(- (X[i] - x0)**2 / (2 * tau**2))

    X_ = np.vstack((np.ones(m), X)).T # shape (m,2)
    x0_ = np.array([1, x0]).reshape(1,2) # shape (1,2)
    theta = np.linalg.pinv(X_.T @ W @ X_) @ (X_.T @ W @ Y)

    y0 = x0_ @ theta
    return y0[0]

X_test = np.linspace(min(X), max(X), 300)
Y_pred = []

tau = 0.5 # Bandwidth parameter
for x0 in X_test:
    y0 = locally_weighted_regression(x0, X, Y, tau)
    Y_pred.append(y0)

Y_pred = np.array(Y_pred)

plt.figure(figsize=(12,7))
plt.scatter(X, Y, color='red', s=10, label='Training data')
plt.plot(X_test, Y_pred, color='blue', label=f'LWR Prediction (tau={tau})')
plt.title('Locally Weighted Regression on California Housing Data')
plt.xlabel('Normalized Median Income')
plt.ylabel('Median House Value')
plt.legend()
plt.grid(True)
plt.show()